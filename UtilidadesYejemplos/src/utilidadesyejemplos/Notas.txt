    ----------------------------------------------------------------------------
    COMENTARIOS ATRIBUTOS
    ----------------------------------------------------------------------------

      - Algunos atributos no van a cambiar nunca de valor una vez que se
      fabrique el vehículo -> inmutables,una vez que se le asigne un valor ya
      no podrá ser cambiado ->final - Otros, podrán ir modificando su valor a
      lo largo del tiempo - El nombre de los atributos constantes (final) se
      escribe con todas las letras en mayúsculas, separando las palabras con el
      caracter _ Aunque hay una excepción - El modificador static, hace que el
      atributo sea común para todos los objetos de una misma clase, es decir,
      todos los atributos de la clase, compartirán ese mismo atributo con el
      mismo valor ->atributo estático o atributo de clase o varible de clase.
     

    
      El convenio estándar indica que aquellos elementos que sean de tipo
      constante (final) deberían seguir la nomenclatura de usar siempre
      mayúsculas y guión bajo para separa cada palabra, sin embargo, hemos
      visto atributos constantes usando "lower camel case" en lugar de las
      mayúsculas, Es habitual que cuando se trate de ->atributos de objeto (no
      de variables locales) se use este modelo para distinguirlo de las
      constantes que sean atributos de clase; Los atributos de clase,
      normalmente serán públicos pues contienen información sobre
      configuraciones,restricciones, que es interesante qeu sea visible desde
      fuera de la clase.
     
     
     

    
      MODIFICADOR STATIC. Gracias al modificador static, NO se creará un
      atributo vehiculosCreados, cada vez que se instancie un objeto vehiculo.
      Si no que este atributo existirá antes de la creación de ningún objeto.
     

    
      ATRIBUTOS DE CLASE CONSTANTE. Podría interesarnos tener almacenada cuál
      es la máxima y mínima capacidad del depósito de combustible para nuestro
      vehículo. Nos tocaría a nosotros indicar cuál sería la cantidad mínima y
      máxima y si no se cumplen estas condiciones no permitimos que se cree ese
      objeto. Son unos valores límite ya establecidos, parece más que
      justificado que se trate de atributos de clase y no de objeto. Se han
      declarado como public, Porque se trata de valores límite que son de
      interés para otros programadorque vaya a utilizar esta clase. Aunque se
      puede tener acceso a su valor, no podrán ser modificados por o que no hay
      riesgo de integridad.Es uno de los pocos casos en los que es positivo
      evitar la privacidad. Pues estamos dando información útil al usuario de
      esta clase y además no pueden ser modificados.
     

    ----------------------------------------------------------------------------
    COMENTARIOS MÉTODOS
    ----------------------------------------------------------------------------
    En la cabecera del método, aunque no es obligatorio, sí puede ser conveniente
    Declarar una lista de nobres de excepciones separadas por comas, utilizamos
    la palabra reservada "throws" seguida de dicha lista.

    Un método "static" (método estático o de clase) es un método desde cuya impl
    ementación no se accede a atributos de objeto. Desde este tipo de métodos só
    lo se puede acceder a atributos de la clase (estáticos) Estos métodos pueden
    ser invocados sin necesidad de tener un objeto de la clase instanciado.

    La llamada a métodos estáticos, se hace normalmente usando el nombre de la 
    propia clase y no el de una instancia (objeto)Pues se trata, realmente de 
    un método de clase.

    Un método "final" es un método que no permite ser redefinido o sobreescrito
    por clases descendientes.

    El modificador "abstract" sirve para indicar que un método es abstracto.
    El método no tendrá implementación, solo la declaración terminada en punto y
    coma,en lugar de las llaves del cuerpo.

    La implementación será realizada en las clases descendientes. Un método sólo
    puede ser declarado como "abstract" si se encuenta dentro de una clase abstract

    El modificador "synchronized" obligará a que cuando un proceso esté ejecutando
    éste método, el resto de procesos que tengan que llamar a ese mismo método 
    deberán esperar a que el otro proceso termine. Puede ser útil si sabes que un
    determinado método va a poder ser llamado concurrentemente por varios procesos
    a la vez.

    En Java, *el paso de parámetros es siempre por valor* excepto en el caso de
    los tipos referenciados (por ejemplo objetos) en cuyo caso se está pasando 
    efectivamente una referencia.

    Varags-> permite que un método pueda tener un número variable de parámetros.
    Para utilizar este mecanismo se coloca un 1-tipo, 2-unos puntos suspensivos (...)
    espacio en blanco y a continuación el 3-nombre del parámetro que aglutinará
    la lista de argumentos variables.
    Es posible utilizar varags con parámetros fijos. La lista de parámetros variable
    debe aparecer al final (y solo puede aparecer una)

    Se permite añadir el modificador "final" a los parámetros de un método, para
    que el parámetro no pueda ser modificado.

    El tipo de valor que devuelva la sentencia return debería ser del mismo tipo 
    o de un tipo COMPATIBLE con el tipo del valor de retorno definido en la cabecera
    del método.

    Se recomienda NO incluir mas de un return en un método, que debería ir al final
    del mismo, como salida natural.
    
    La recomendación es usar this.nombre cada vez que usemos en un método-> mejora
    la legibilidad.

    Al llevar a cabo comprobaciones sobre parámetros que son referencias a objetos
    (por ejemplo String o LocalDate) debes tener la precaución de comprobar primero
    que NO son "null" porque si intentas acceder a un miembro(método o atributo) de
    una referencia null, se produce un error saltando una excepción NullPointerException.
    Cuando sepas que no es null, puedes intentar acceder al método que consideres
    oportuno.

    Se puede llamar a un constructor de una clase desde otro constructor de la misma clase:
    con el método this(), dentro de un cosntructor sirve para hacer una llmada al 
    constructor de la misma clase cuya lista de argumentos coincida con los que se le pasa a
    this().
    La única restricción es que, de invocar a this(), dentro de un constructor,
    ésta tiene que ser obligatoriamente la primera sentencia del nuevo constructor.

    Podemos tener un constructor que se encargue de todo el "trabajo duro" de comprobaciones
    y asignaciones y el resto de constructores (que normalmente tendrán una menor cantidad de parámetros) 
    harán uso de este constructor más "inteligente", evitando tener que repetir el código 
    que éste contiene.

    Es conveniente tener valores por omisión(así como máximos y mínimos) en 
    constantes de clase para no tener que escribirlos una y otra vez a lo largo del código.

    Método de fábrica:
        -Debe ser estático.
        -Devolver un objeto del mismo tipo que la clase a la que pertenece.
        -Llamar a algún constructor de la clase con el operador new.
        -Devolver la referencia obtenida con el operador new mediante una sentencia return.

    Cada vez que utilicemos un método de una clase (incluido el constructor) debemos revisar si existe la
    posibilidad de que puedan lanzarse excepciones desde ese método en caso afirmativo:
    Habrá que encerrar la llamada a ese método en un bloque try-catch